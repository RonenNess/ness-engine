/* 
  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Ronen Ness
  ronenness@gmail.com

*/

/**
* A special container that has no graphics and contain all the screen within its bounderies.
* this is the top-level container generated by the gui manager that contains all the sub elements.
* Author: Ronen Ness
* Since: 12/1014
*/

#pragma once

#include "container.h"
namespace Ness
{
	namespace Gui
	{

		// a gui frame that contain other widgets
		class RootContainer : public Container
		{

		public:

			// disable basic events
			NESSENGINE_API virtual void __invoke_event_get_focus() {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_lose_focus() {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_click(EMouseButtons mouse_button, const Pointi& mouse_pos) {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_key_down(EMouseButtons key) {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_key_up(EMouseButtons key) {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_mouse_enter(const Pointi& mouse_pos) {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_mouse_leave(const Pointi& mouse_pos) {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_mouse_hover(const Pointi& mouse_pos) {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_visibility_changed(bool new_state, bool by_parent) {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_enabled_changed(bool new_state, bool by_parent) {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_parent_moved() {throw IllegalAction("No event should be invoked for root container!");}
			NESSENGINE_API virtual void __invoke_event_update_position() {throw IllegalAction("No event should be invoked for root container!");}

			NESSENGINE_API virtual bool is_point_on(const Pointi& pos) {throw IllegalAction("No event should be invoked for root container!");}

			NESSENGINE_API virtual void set_position(const Point& new_pos, const Point& anchor = Point::ZERO) {throw IllegalAction("Cannot set root container position!");}
			NESSENGINE_API virtual void set_position_aligned(const Pointi& new_pos_grid, const Point& anchor = Point::ZERO) {throw IllegalAction("Cannot set root container position!");}

			NESSENGINE_API virtual void calculate_bounding_box();

			// create the frame widget
			NESSENGINE_API RootContainer(GuiManager* manager)
				: Container(manager, nullptr, Point::ZERO, false) 
			{ }

			// return the element's bounding box
			NESSENGINE_API virtual const BoundingBox& get_bounding_box() const;

			// handle mouse movement
			NESSENGINE_API bool handle_mouse_move(const Pointi& mouse_pos);

			// handle mouse state (ture is mouse down false is mouse up)
			NESSENGINE_API bool handle_mouse_state(EMouseButtons button, bool state, const Pointi& mouse_pos);
		};

		// a pointer to a gui widget
		NESSENGINE_API typedef SharedPtr<RootContainer> RootContainerPtr;
	}
}